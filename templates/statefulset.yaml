{{- $mongoport := default "27017" .Values.service.port -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-mongodb
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "mongodb.labels" . | nindent 4 }}
spec:
  serviceName: {{ .Values.name }}-headless
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-mongodb
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-mongodb
    spec:
      updateStrategy: {{- toYaml .Values.updateStrategy | nindent 8 }}
      initContainers:
        - name: {{ .Values.name }}-init
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 0
          command:
            - "/bin/sh"
            - "-c"
          args:
            - |
              if [ ! -f /data/db/keyfile ]; then
                echo $KEYFILE > /data/db/keyfile
                chmod 600 /data/db/keyfile
                chown mongod:mongod /data/db/keyfile
              fi
          envFrom:
            - secretRef:
               name: {{ .Values.name }}-init-secret
          volumeMounts:
            - name: data
              mountPath: /data/db
      containers:
        - name: {{ .Values.name }}
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          securityContext: {{- toYaml .Values.securityContext | nindent 12 }}
          livenessProbe:
            {{- if .Values.livenessProbe.enabled }}
            exec:
              command:
                - mongosh
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            {{- end }}
          readinessProbe:
            {{- if .Values.readinessProbe.enabled }}
            exec:
              command:
                - mongosh
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            {{- end }}
          ports:
            - containerPort: {{ $mongoport }}
              name: mongodb
          args:
            - "--replSet={{ .Values.replicaSet }}"
            - "--bind_ip_all"
            - "--keyFile=/data/db/keyfile"
          envFrom:
            - secretRef:
               name: {{ .Values.name }}-init-secret
          volumeMounts:
            - name: data
              mountPath: /data/db
      volumes:
      - name: keyfile
        secret:
          secretName: {{ .Values.name }}-init-secret
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
